{"Model":[{"description":"Instantiates a Model.","tags":[{"title":"class","description":null,"type":null,"name":"Model"},{"title":"param","description":"RethinkDB connection object.","type":{"type":"NameExpression","name":"Object"},"name":"conn"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Schema"},"name":"schema"}]},{"description":"Finds resources that match the criteria in `options`.\n\n```\napp.model('user').find({\n  filter: { name: 'Dylan' },\n  pluck: { password: true },\n  include: { pets: true },\n}).then(users => {\n  // ResourceArray\n});\n```","tags":[{"title":"method","description":null,"name":"find"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"ResourceArray"}}]},{"description":"Finds the first resource (out of potentially many) that matches the criteria in `options.`","tags":[{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Retrieves the resource(s) related to a particular resource identified by `id` according to\n`relationship`. A relationship with a relation of `hasMany` returns a `ResourceArray`, and a\nrelationship with a relation of `hasOne` or `belongsTo` returns a `Resource`.\n\n```js\n// pretend user `1` has a ton of pets\napp.model('user').findRelated('1', 'pets', {\n  filter: { species: 'hamster' },\n}).then(pets => {\n  // ResourceArray\n});\n\n// pretend user `1` has a company\napp.model('user').findRelated('1', 'company').then(company => {\n  // Resource\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":"The id of the parent resource.","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":"The relationship to the parent.","type":{"type":"NameExpression","name":"String"},"name":"relationship"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"returns","description":null,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Resource"},{"type":"NameExpression","name":"ResourceArray"}]}}]},{"description":"Retrieves the resource corresponding to `id`.\n\n```js\napp.model('user').fetchResource('1').then(user => {\n  // Resource\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":"The ID of the resource to retrieve.","type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Persists a record in the database and creates a resource. The 'record' object must be a\nflattenen JSON with attributes and relationships. All relationships in `record` must be\nrepresented by either a string for a `hasOne` or `belongsTo` relation, or an array of strings\nfor a `hasMany` relation.\n\n```js\napp.model('user').create({\n  name: 'Dylan',\n  email: 'dylanslack@gmail.com',\n  password: 'supersecret',\n  pets: [ '1', '2', '3' ],\n  company: '1',\n}).then(user => {\n  // Resource\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"record"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Updates a record in the database and creates a resource. The data object must be a flattened\nJSON with attributes and relationships, which are represented by ids. Missing attributes and\nrelationships are not interpreted as null.\n\n```js\napp.model('user').update('1', {\n  name: 'Bob Smith',\n}).then(user => {\n  // Resource\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"updates"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Archives a record.\n\n```js\napp.model('user').archive('1').then(user => {\n  user.isArchived() === true\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"id"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Object"}},"name":"options","default":"{}"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"Resource"}}]}],"ModelArray":[{"description":"Instantiates a ModelArray.\n\n```\n// example `models` object\nconst models = {\n  user: {\n    model: Model,\n  },\n  animal: {\n    model: Model,\n    alias: 'pets'\n  },\n};\n```","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":"A dictionary of models, including their optional aliases.","type":{"type":"NameExpression","name":"Object"},"name":"models"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"ModelArray"}}]},{"description":"Returns true if a Model with type `type` is found in the model registry.","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"type"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Boolean"}}]},{"description":"Returns true if a Model with alias `alias` is found in the model registry.","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"alias"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Boolean"}}]},{"description":"Returns a Model instance by its alias.","tags":[{"title":"private","description":null,"type":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"alias"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Model"}}]},{"description":"Returns an object of values returned by each function in `actions`.\n\n```js\napp.model('user', 'animal:pets').map({\n  user(model) {\n    // model === app.model('user')\n    return model.findResource('1');\n  },\n  pets(model) {\n    // model === app.model('animal')\n    return model.find({\n      filter: { age: 5 },\n    });\n  },\n}).then(results => {\n  const user = results.user; // Resource\n  const pets = results.pets; // ResourceArray\n});\n```","tags":[{"title":"async","description":null},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"actions"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"Object"}}]}],"Redink":[{"description":"Connects to the RethinkDB database.","tags":[{"title":"async","description":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Promise"}}]},{"description":"Disconnects from the RethinkDB database.","tags":[{"title":"async","description":null},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Promise"}}]},{"description":"Registers Redink schemas. In other words, this completes the schema graph by hydrating inverse\nrelationships where necessary. After finishing the graph, it ensures that all proper tables are\ncreated with each schema `type` as the table name.","tags":[{"title":"param","description":"Redink schemas.","type":{"type":"NameExpression","name":"Object"},"name":"schemas"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Promise"}},{"title":"todo","description":"Create indices where necessary."}]},{"description":"Returns a `Model` or `ModelArray` instance with the matching type(s) from Redink's model\nregistry. Any string in `types` after a colon is interpreted as an alias.\n\n```js\nconst model = app.model('user'); // user model\nconst modelArray = app.model('user', 'animal:pets'); // animal model with 'pets' alias\n```","tags":[{"title":"param","description":null,"type":{"type":"RestType","expression":{"type":"NameExpression","name":"String"}},"name":"types"},{"title":"returns","description":null,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Model"},{"type":"NameExpression","name":"ModelArray"}]}}]}],"Resource":[{"description":"Instantiates a Resource.","tags":[{"title":"param","description":"RethinkDB connection object.","type":{"type":"NameExpression","name":"Object"},"name":"conn"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Schema"},"name":"schema"},{"title":"param","description":null,"type":{"type":"NameExpression","name":"Object"},"name":"record"}]},{"description":"Returns an attribute.\n\n```\napp.model('user').fetchResource('1').then(user => {\n  user.attribute('name') === 'Dylan'\n});\n```","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"attribute"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Any"}}]},{"description":"Returns all the attributes.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},{"description":"Returns a relationship of the resource.\n\n```\napp.model('user').fetchResource('1').then(user => {\n  user.relationship('pets') === {\n    type: 'animal',\n    schema: Schema,\n    relation: 'hasMany',\n    records: [{\n      id: '1',\n      _archived: false,\n    }, {\n      id: '2',\n      _archived: false,\n    }],\n    inverse: {\n      type: 'user',\n      relation: 'belongsTo',\n      field: 'owner',\n    },\n  }\n\n  user.relationship('company') === {\n    type: 'company',\n    schema: Schema,\n    relation: 'hasOne',\n    record: {\n      id: '1',\n      _archived: false,\n    },\n    inverse: {\n      type: 'user',\n      relation: 'hasMany',\n      field: 'employees',\n    },\n  }\n});\n```","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"relationship"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},{"description":"Returns all the relationships.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]},{"description":"Ensures that the state of this resource propagates through its relationships that demand\npropagation.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Promise"}}]},{"description":"Fetches either the `Resource` or `ResourceArray` related to this resource by `relationship`.\n\n```\napp.model('user').fetchResource('1').then(user => {\n  return user.fetch('company');\n}).then(company => {\n  // Resource\n});\n```","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"String"},"name":"relationship"},{"title":"param","description":null,"type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Options"}},"name":"options","default":"{}"},{"title":"return","description":null,"type":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Resource"},{"type":"NameExpression","name":"ResourceArray"}]}}]},{"description":"Returns true if this is archived.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Boolean"}}]},{"description":"Returns a plain object with an `attributes` key, a `relationships` key, and a `meta` key.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Object"}}]}],"ResourceArray":[{"description":"Returns the first resource.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Returns the last resource.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Resource"}}]},{"description":"Maps over the resources and invokes `fn` with each individual `resource` as the argument.\n\n```\napp.model('user').findRelated('1', 'pets').then(pets => {\n  return pets.map(pet => pet.update({ age: pet.attribute('age') + 1 }));\n}).then(newPets => {\n  // ResourceArray\n});\n```","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Function"},"name":"fn"},{"title":"return","description":null,"type":{"type":"NameExpression","name":"Array"}}]},{"description":"Invokes `fn` with each individual `resource` as the argument.\n\n```\napp.model('user').findRelated('1', 'pets').then(pets => {\n  return pets.each(pet => pet.archive());\n});\n```","tags":[{"title":"param","description":null,"type":{"type":"NameExpression","name":"Function"},"name":"fn"}]},{"description":"Returns the number of resources.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Number"}}]},{"description":"Returns an array of plan `Resource` objects.","tags":[{"title":"return","description":null,"type":{"type":"NameExpression","name":"Array"}}]}]}